Adapterパターン：新規のインターフェース（API）に合わるために、既に存在する（テスト済みの）クラスを部品として再利用するときに便利
    クラスを利用する場合（継承）と移譲を利用する場合がある。
    （移譲、Javaではあるメソッドの処理を他のインスタンスのメソッドに任せること）。単一継承の制約を解消するため。こちらが一般的
    ※比較：Decoratorパターンは、インターフェースを変えずに機能を追加するパターン
Factory_Methodパターン：Abstractクラスは、concreteクラスに依存していない
    通し番号の付与に注目。（シングルトンとの違いは）
Strategyパターン：アルゴリズムを容易に切り替えることができる。
Singletonパターン：インスタンスが複数生成されることを防ぐ。
Observerパターン：状態を持っているConcreteSubjectクラスと、状態変化を通知するConcreteObserver役が登場した。二つの役目をつなぐのが、
    インターフェースとしてのSubject役(abstract_class)とObserver(interface)役。観察者というより通知。MVCのMとVの関係に近い。