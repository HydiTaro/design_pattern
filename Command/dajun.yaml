openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description:
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url:
servers:
  - url:
tags:
  - name: hit_order
    description: Everything about your hit_order
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: pitch_order
    description: Everything about your pitch_order
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: team
    description: Access to team
    externalDocs:
      description: Find out more about our team
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /order/hit_order:
    get:
      tags:
        - hit_order
      summary: Find hit_order  <after by userId>
      description: Returns a hit_order data in home.
      operationId: getHitOrderByUseridInPocket
      parameters:
        - name: userId
          in: query
          description:
          required: true
          schema:
            type: integer
            format: varchar64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Csv"
            application/xml:
              schema:
                $ref: "#/components/schemas/Csv"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - csv
      summary: Create a csv in the store with form data
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: query
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    update:
      tags:
        - csv
      summary: Updates a csv in the store with form data
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: query
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - csv
      summary: Deletes a csv
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: petId
          in: query
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /verify/uncondition:
    post:
      tags:
        -
      summary:
      description: 無条件の得点検証（対戦相手が過去の平均？1000試合）
      operationId: verifyUncondition
      parameters:
        - name: csvId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
components:
  schemas:
    Player:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10189439847
        fName:
          type: string
          example: 村松
        lName:
          type: string
          example: 有人
        age:
          type: int
          example: 33
        team:
          type: string
          example:
          enum:
            - Hansin
            - Hawks
            - Giants
    Hitter_Hyoji:
      type: object
      properties:
        OBP:
          type: integer
          description: 出塁率
          format: int4
        bat:
          type: integer
          description: 打率
          format: int4
        slu:
          type: integer
          description: 長打率
          format: int4
        homerun:
          type: integer
          description: ホームラン数
          format: int4
        bunt:
          type: integer
          description: バント成功率
          format: int4
        vsLeftee:
          type: integer
          description: 対左打率
          format: int4
        run_try:
          type: integer
          description: 盗塁企画
          format: int4
        run_success:
          type: integer
          description: 盗塁成功率
          format: int4
    Hitter_Data:
      type: object
      properties:
        BB:
          type: integer
          description: 四死球
          format: int4
        single:
          type: integer
          description: シングル率
          format: int4
        second:
          type: integer
          description: 二塁打率
          format: int4
        third:
          type: integer
          description: 三塁打率
          format: int4
        homerun:
          type: integer
          description: ホームラン率
          format: int4
        bunt:
          type: integer
          description: バント成功率
          format: int4
        vsLeftee:
          type: integer
          description: 対左打率
          format: int4
        run_try:
          type: integer
          description: 盗塁企画率
          format: int4
        run_success:
          type: integer
          description: 盗塁成功率
          format: int4
        kk:
          type: integer
          description: 三振率（三振以外はエラーで出塁&進塁）
          format: int4
        defence_error:
          type: integer
          description: エラー率
          format: int4
      xml:
        name: order
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Pocket:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    WareHouse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Csv:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: csv status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: csv
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
